#!/bin/bash

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

# Print usage information
case $1 in
   -h|-help)
      cat <<EOF

   $0 [-h|-help] {mfem_dir}

   where: {mfem_dir}  is the MFEM source directory [default value: ../..]
          -h|-help    prints this usage information and exits

   This script checks if there are any disallowed files (binary or large files)
   and/or a large number of changes in the current branch history from the point
   of divergence with master, i.e. in the commits that will be merged if the
   current branch is merged with master.

   To be useful, the script should be run in a clean repository that doesn't
   have any uncommitted changes and the repository should not be in a "detached
   HEAD" state.

   Example usage: $0 ../..

EOF
      exit
      ;;
esac

# Setup
cur_dir=`pwd`
mfem_dir=$1
if [ "$mfem_dir" = "" ]; then
    mfem_dir="../.."
fi
cd $mfem_dir
mfem_dir=`pwd`
shift

# Maximum number of acceptible commits in the branch
max_num_commits=100
# Maximum number of acceptible files changed in a commit
max_files_changed=100
# Maximum number of acceptible line changes in a commit
max_lines_changed=3000
# Maximum size (in K) of any single file changed
max_file_size=200

current_branch="$(git symbolic-ref --short HEAD)"

# Check if the branch contains unusually large number of commits
num_commits="$(git rev-list --count master..${current_branch})"
if [ ${num_commits} -gt ${max_num_commits} ]
then
    echo "This branch contains unusually many commits: ${num_commits} commits not in master" 1>&2
fi

# Check all the commits in the current branch:
while read -r rev; do
    # echo "Processing commit ${rev}"
    shortrev="$(git log -1 --format=%h ${rev})"

    # Check if the commit changes an unusually large number of files
    files_changed="$(git show --pretty="" --shortstat ${rev} | awk '{ print $1 }')"
    if [ ${files_changed} -gt ${max_files_changed} ]
    then
	echo "Commit ${shortrev} changes unusually many files: ${files_changed} files changed" 1>&2
    fi

    # Check if the commit changes an unusually large number of lines
    lines_changed="$(git show --pretty="" --shortstat ${rev} | awk '{ print $4+$6 }')"
    if [ ${lines_changed} -gt ${max_lines_changed} ]
    then
	echo "Commit ${shortrev} changes unusually many lines: ${lines_changed} lines changed" 1>&2
    fi

    # Check all the files modified in the current commit:
    for fname in $(git show --pretty="" --name-only ${rev})
    do
        if [ -e $fname ] # exclude deleted files
        then
            # Check if the file is binary (non-text file as reported by "file")
            binary="$(file -b ${fname} | grep -v 'text')"
            if [ -n "${binary}" ]
            then
                echo "Commit ${shortrev} contains a binary file: ${fname} (${binary})" 1>&2
            fi

            # Check if the file is unusually large
            file_size="$(du -k ${fname} | cut -f1)"
            if [ ${file_size} -gt ${max_file_size} ]
            then
                echo "Commit ${shortrev} adds/modifies a large file: ${fname} (size ${file_size}K)" 1>&2
            fi
        fi
    done

done < <(git rev-list --reverse --no-merges master..${current_branch})

# Return to the original branch and directory
cd $cur_dir
