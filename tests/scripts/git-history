#!/bin/bash

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.org.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

# Print usage information
case $1 in
   -h|-help)
      cat <<EOF

   $0 [-h|-help] {mfem_dir}

   where: {mfem_dir}  is the MFEM source directory [default value: ../..]
          -h|-help    prints this usage information and exits

   This script checks if there are any disallowed files (binary or large files)
   and/or a large number of changes in the current branch history from the point
   of divergence with master, i.e. in the commits that will be merged if the
   current branch is merged with master.

   To be useful, the script should be run in a clean repository that doesn't
   have any uncommitted changes and the repository should not be in a "detached
   HEAD" state.

   Example usage: $0 ../..

EOF
      exit
      ;;
esac

# Setup
cur_dir=`pwd`
mfem_dir=$1
if [ "$mfem_dir" = "" ]; then
    mfem_dir="../.."
fi
cd $mfem_dir
mfem_dir=`pwd`
shift

current_branch="$(git symbolic-ref --short HEAD)"

num_commits="$(git rev-list --count master..${current_branch})"

if [ ${num_commits} -gt 10 ]
then
    echo "This branch contains a very large number of commits! (${num_commits} commits not in master)" 1>&2
fi

# Check all the commits in the current branch, starting with the common ancestor
# with master, for large and binary files
while read -r rev; do
    echo "Processing commit ${rev}"
    git checkout -q "${rev}"
    shortrev="$(git log -1 --format=%h)"

    # Compute the total number of changes (line insertions + line deletions) in
    # all the files in the commit.
    changes=$(git show --pretty="" --numstat | awk '{change+=$1+$2} END {print change}')

    # If the total number of changes is more than 50K, print an error
    if [ ${changes} -gt 10 ]
    then
        echo "Commit ${rev} is unusually large: it changes ${changes} lines" 1>&2
    fi

    # Loop over the files modified in the current commit.
    for fname in $(git show --pretty="" --name-only ${rev})
    do
        if [ -e $fname ] # exclude deleted files
        then
            # Report binary files (non-text files as reported by "file")
            binary="$(file -b ${fname} | grep -v 'text')"
            if [ -n "${binary}" ] # non-empty files
            then
                echo "Commit ${shortrev} contains a binary file: ${fname} (${binary})" 1>&2
                echo "Commit ${rev} contains a binary file: ${fname} (${binary})" 1>&2
            fi

            # Report files greater than 50K
            size="$(du -k ${fname} | cut -f1)"
            if [ ${size} -gt 50 ]
            then
                echo "Commit ${rev} adds/modifies a large file: ${fname} (size ${size}K)" 1>&2
            fi
        fi
    done

done < <(git rev-list --reverse master..${current_branch})

# Return to the original branch and directory
git checkout -q ${current_branch}
cd $cur_dir
